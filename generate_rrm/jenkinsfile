def remote = [:]
    remote.name = 'root'
    remote.host = '172.18.0.4'
    remote.allowAnyHosts = true
pipeline {
    agent any
    // Объявление параметров запуска
    environment {
        SSH_CREDS = credentials('root')
    }
    options {
        // Настройка связи с Bitbucket
        timestamps()
        disableConcurrentBuilds()
    }
    stages {
        stage('Call API') {
            steps {
                script {
                    
                    echo "The pipeline startet by: " + env.BUILD_USER
                    def body = """{
                        "release": "$params.release",
                        "branch" : "$params.branch",
                        "developer": "$env.BUILD_USER",
                        "username": "$env.BB_CREDS_USR",
                        "password": "$env.BB_CREDS_PSW",
                        "date": "12 2 222",
                        "logging_level": "$params.logging_level"
                    }"""
                    echo "response body: " + body
                    try{
                        def response = httpRequest consoleLogResponseBody: false, 
                        httpMode: 'GET', ignoreSslErrors: true, 
                        validResponseCodes: '200,400:450,500', 
                        url: 'https://host.docker.internal:8443/api', 
                        responseHandle: 'LEAVE_OPEN', 
                        wrapAsMultipart: false
                        def props = readJSON text: response.content
                        // def log_path = "/cg/logs/app_log.log"
                        if (response.status != 200){
                            // def log_path = props['log_path']
                            error(props['detail'])
                        }
                        sshGet remote: remote, from: /cg/logs/ into: env.PWD, override: true
                        ..sshGet remote: remote, from: props["roles_path"], into: env.PWD, override: true
                        archiveArtifacts(
                        artifacts: props["roles_path"],
                        allowEmptyArchive: true,
                        onlyIfSuccessful: false
                        )
                    }
                    catch (Exception e) {
                        error("Error occurred: ${e.getMessage()}")
                    }
                }
            }
        }
    }
    post {
        always{
            script{
                echo "Hello"
            }
        }
        failure{
            echo "See log above to see errors"
        }
    }
}
