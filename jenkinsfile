def remote = [:]
    remote.name = 'root'
    remote.host = '172.18.0.4'
    remote.allowAnyHosts = true
pipeline {
    agent any
    // Объявление параметров запуска
    parameters {
        string(name: 'release', defaultValue: 'DWH/', description: 'release')
        string(name: 'branch', defaultValue: 'feature/', description: 'branch')
        choice(choices: ['INFO', 'ERROR', 'WARN', 'DEBUG'], description: 'Выбор уровня логирования', name: 'logging_level')
    }
    environment {
        SSH_CREDS = credentials('root')
        BB_CREDS = credentials('bitbucket')
        // Подсветка служебных слов в логе
        ANSI_COLOR = 'xterm'
        HIGHLIGHT_WORDS = '[Ee]rror|[Ff]ail|[Ss]kip|[Ww]arn'
    }
    options {
        // Настройка связи с Bitbucket
        timestamps()
        disableConcurrentBuilds()
    }
    stages {
        
        stage('Call API') {
            steps {
                script {
                    wrap([$class: 'AnsiColorBuildWrapper', colorMapName: 'xterm']){
                        echo "The pipeline startet by: " + env.BUILD_USER
                        def body = """{
                            "release": "$params.release",
                            "branch" : "$params.branch",
                            "developer": "$env.BUILD_USER",
                            "username": "$env.BB_CREDS_USR",
                            "password": "$env.BB_CREDS_PSW",
                            "date": "09.08.2024 10:10:10",
                            "logging_level": "$params.logging_level"
                        }"""
                        echo "response body: " + body
                        try{
                            def response = httpRequest consoleLogResponseBody: false, 
                            httpMode: 'POST', ignoreSslErrors: true, requestBody: body, 
                            validResponseCodes: '200,400:450', 
                            url: 'https://host.docker.internal:8443/api/start', 
                            responseHandle: 'LEAVE_OPEN', 
                            wrapAsMultipart: false
                            def props = readJSON text: response.content
                            
                            if (response.status != 200){
                                error(props['detail'])
                            } else{
                                echo "props['message']"
                            }
                        }
                        catch (Exception e) {
                            error("Error occurred: ${e.getMessage()}")
                        }
                    }
                }
            }
        }
    }
    post {
        always{
            script{
                echo $env
                remote.user=env.SSH_CREDS_USR
                remote.password=env.SSH_CREDS_PSW
                sshGet remote: remote, from: '/cg/logs', into: '/var/jenkins_home/workspace/test', override: true
                // def read = readFile encoding: 'utf-8', file: '/var/jenkins_home/app_log.log'
                // echo "======= echo user - log file ======="
                // echo "$read"
                sshCommand remote: remote, command: "cat /cg/logs/app_log.log"
                // sh "cat /cg/logs/app_log.log"
                archiveArtifacts artifacts: '**', followSymlinks: false
            
            }
        }
        failure{
            echo "See log above to see errors"
        }
    }
}
